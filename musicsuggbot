from spotipy.oauth2 import SpotifyClientCredentials
import spotipy
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from collections import Counter

# Spotify API Credentials
SPOTIFY_CLIENT_ID = "a712aee246a04324b971b935d368d8aa"
SPOTIFY_CLIENT_SECRET = "54bfb09cb57a411bb3f0c6cd3d8f7e0e"

# Telegram Bot Token
TOKEN = "7778448900:AAF0OaVMauyMkSzCj99Z13ZlTNy-Z13v4ks"

# Initialize Spotify API Client
auth_manager = SpotifyClientCredentials(client_id=SPOTIFY_CLIENT_ID, client_secret=SPOTIFY_CLIENT_SECRET)
spotify = spotipy.Spotify(auth_manager=auth_manager)


# Function to get genres from a playlist
def get_genres_from_playlist(playlist_id):
    try:
        results = spotify.playlist_tracks(playlist_id)
        tracks = results['items']

        genre_map = {}  # Dictionary to store genres

        for track in tracks:
            artists = track['track']['artists']
            for artist in artists:
                artist_id = artist['id']
                artist_name = artist['name']

                # Fetch artist info
                artist_info = spotify.artist(artist_id)
                genres = artist_info.get('genres', [])

                # Store genres for the artist
                genre_map[artist_name] = genres

        return genre_map

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return {}


# Function to analyze popular genres
def get_popular_genres(genre_data):
    genre_counter = Counter()

    for genres in genre_data.values():
        genre_counter.update(genres)

    # Get top 5 most common genres
    popular_genres = genre_counter.most_common(5)
    return popular_genres


# Function to find unknown artists by genre
def find_unknown_artists(genre, max_listeners=50000):
    try:
        print(f"–ò—â—É –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–∞: {genre}")
        results = spotify.search(q=f"genre:{genre}", type="artist", limit=50)
        artists = results['artists']['items']
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–∞ {genre}")

        unknown_artists = [
            {
                "name": artist["name"],
                "listeners": artist["followers"]["total"],
                "link": artist["external_urls"]["spotify"]
            }
            for artist in artists if artist["followers"]["total"] <= max_listeners
        ]

        if not unknown_artists:
            print(f"–î–ª—è –∂–∞–Ω—Ä–∞ {genre} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º {max_listeners} —Å–ª—É—à–∞—Ç–µ–ª–µ–π.")
        return unknown_artists

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–∞ {genre}: {e}")
        return []


# Telegram Bot Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /start command."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç Spotify, –∏ —è –Ω–∞–π–¥—É –∂–∞–Ω—Ä—ã –µ–≥–æ —Ç—Ä–µ–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂—É –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π! üéµ"
    )


async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for receiving playlist links."""
    message = update.message.text

    if "spotify.com/playlist/" in message:
        try:
            # Extract playlist ID from the link
            playlist_id = message.split("playlist/")[1].split("?")[0]

            # Fetch genres
            genre_data = get_genres_from_playlist(playlist_id)

            if genre_data:
                # Analyze popular genres
                popular_genres = get_popular_genres(genre_data)
                response = "–í–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –∞—Ä—Ç–∏—Å—Ç–∞–º:\n\n"

                for genre, _ in popular_genres:
                    artists = find_unknown_artists(genre)
                    response += f"üéµ –ñ–∞–Ω—Ä: {genre}\n"
                    if artists:
                        for artist in artists:
                            response += f"  - [{artist['name']}]({artist['link']}) ({artist['listeners']} —Å–ª—É—à–∞—Ç–µ–ª–µ–π)\n"
                    else:
                        response += "  - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤\n"
                    response += "\n"

            else:
                response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∂–∞–Ω—Ä–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."

        except Exception as e:
            response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}"
    else:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç Spotify."

    await update.message.reply_text(response, parse_mode="Markdown")


# Main Function
if __name__ == "__main__":
    # Create Telegram bot application
    app = ApplicationBuilder().token(TOKEN).build()

    # Add handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    # Run the bot
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


    Vladislav
    